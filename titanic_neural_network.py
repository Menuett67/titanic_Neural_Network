# -*- coding: utf-8 -*-
"""titanic_neural network.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XvMc2HbUnK9yz1MSPcZtcCiUg-1M2ubV
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
from sklearn import metrics
from sklearn.preprocessing import LabelEncoder
data_train=pd.read_csv("train.csv")
data_train.head(10)
data_test=pd.read_csv("test.csv")
data_lable=pd.read_csv("gender_submission.csv")

#converting string to int
 #we can also use data_train.replace(["female","male"],[0,1],inplace=True)
le =LabelEncoder()

data_train["Sex"]= le.fit_transform(data_train["Sex"])
#fill missing values
data_train.fillna(0,inplace=True)
data_train

## defining X_train and Y_train
X_train=np.array(data_train[["Pclass","Sex","Age","SibSp","Fare","Parch"]])
Y_train=np.array(data_train[["Survived"]])

## creating  the model
model=tf.keras.models.Sequential([
    tf.keras.layers.Dense(6, activation="sigmoid"),    #input layer
    tf.keras.layers.Dense(20,activation="relu"),   #hidden layer 1
    tf.keras.layers.Dense(8,activation="sigmoid"),#hidden layer 2
    tf.keras.layers.Dense(2,activation="softmax")#out put layer
])

model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.01),
              loss=tf.keras.losses.sparse_categorical_crossentropy,
              metrics=['accuracy'])

output=model.fit(X_train,Y_train,epochs=100)

plt.plot(output.history["loss"])
plt.show()

plt.plot(output.history["accuracy"])
plt.show()

from google.colab import drive
drive.mount('/content/drive')

# Save the entire model
model.save(r"/content/titanic.h5")

loaded_model = tf.keras.models.load_model(r"/content/titanic.h5")

le =LabelEncoder()

data_test["Sex"]= le.fit_transform(data_test["Sex"])
#fill missing values
data_test.fillna(0,inplace=True)
data_test

## defining X_test and Y_test
X_test=np.array(data_test[["Pclass","Sex","Age","SibSp","Fare","Parch"]])
Y_test=np.array(data_lable[["Survived"]])

predictions = loaded_model.predict(X_test)

evaluation_results=model.evaluate(X_test,Y_test)
loss,accuracy=evaluation_results

plt.subplot(1, 2, 1)
plt.plot([accuracy], marker='o', linestyle='--', color='b')
plt.title('Test Accuracy')
plt.xlabel('Metrics')
plt.ylabel('Accuracy')

plt.subplot(1, 2, 2)
plt.plot([loss], marker='*', linestyle='-', color='r')
plt.title('Test Loss')
plt.xlabel('Metrics')
plt.ylabel('Loss')

